## The sequence of triangle numbers is generated by adding the natural numbers.
## So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
## The first ten terms would be:

##             1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

## Let us list the factors of the first seven triangle numbers:

## 1: 1
## 3: 1,3
## 6: 1,2,3,6
##10: 1,2,5,10
##15: 1,3,5,15
##21: 1,3,7,21
##28: 1,2,4,7,14,28
## We can see that 28 is the first triangle number to have over five divisors.

## What is the value of the first triangle number to have over five hundred divisors?

def TriangleMachine():
    """
    Generates triangle numbers.
    yields: a triangle number
    """
    i, triangle = 0, 0
    while True:
        i += 1
        triangle += i
        yield triangle

def divisibleTriangle():
    import math
    for triangle_number in TriangleMachine():
        sqrt = int(math.sqrt(triangle_number))
        divisors = set(reduce(list.__add__, ([i, triangle_number//i] for i in range(1, sqrt+1) if triangle_number%i == 0)))
        if len(divisors) > 500:
            print triangle_number
            break
        
## ANSWER = 76576500
## This link helped a lot:
        ## http://stackoverflow.com/questions/6800193/what-is-the-most-efficient-way-of-finding-all-the-factors-of-a-number-in-python
